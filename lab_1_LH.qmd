---
title: "Lab 1"
author: "Lily"
format: 
  html:
    code-fold: true
    toc: true
execute: 
  echo: true
  message: false
  warning: false
editor: visual
---


```{r setup}
library(tidyverse)
library(here)
library(sf)
library(tmap)
```


```{r load data}
sfo_trees_df <- read_csv(here("data", "sfo_trees", "sfo_trees.csv")) |>
  janitor::clean_names()

```

# Part 1: Data Exploration and Wrangling Review

## Example 1: 
 
Find counts of observations by 'legal_status', then select the statuses with the five highest tree counts. 
 
### Pseudocode

grouping by legal status
pivot- each observation into own variable column, so counts are separate
by_legal_status <- group_by(sfo_trees_df, legal_status)
summrize by tree count


```{r}
sfo_trees_df |> 
  group_by(legal_status) |>
  summarize(tree_count = n()) #n says how many observations

top_5_status <- sfo_trees_df |> 
  filter(!is.na(legal_status)) |> #drop the na legal statuses
  group_by(legal_status) |>
  summarize(tree_count = n())|>
  ungroup() |>
  slice_max(tree_count, n=5) #slice the top 5 columns
```


Make a ggplot of the top observations from above:

```{r}
trees_plot <- ggplot(top_5_status, aes(y=fct_reorder(legal_status, tree_count), x=tree_count))+
  geom_col()+
  theme_minimal()+
  labs(x= "Number of Trees", y = "Legal Status")+
  ggtitle("Tree Count by Legal Status")
trees_plot
```


## Example 2

Only keep observations where legal status is "Permitted Site" and caretaker is "MTA" or "DPW". Store as "permitted_mta_dpw"

## Pseudocode

filter the observations with the legal status "Permitted Site", same for MTA or DPW

### Functional Code

```{r}
permitted_mta_dpw <- sfo_trees_df |> 
  filter(legal_status == "Permitted Site" & caretaker %in% c('MTA', 'DPW'))  # %in% functions like == but provides more flexibility
```


## Example 3

Only keep observations of oak and pine trees
then only keep columns "species", "legal_status", "plant_date", and "latitude" and "longitude"
For each tree, note whether it's an oak or a pine!

### Pseudocode
 select function to select columns, filter using %in% to keep observations of oak and pine
species observations include scientific name::common name; way to separate out?
### Functional Code
```{r}
oak_pine_df <- sfo_trees_df |> 
  filter(str_detect(species, "Oak")| str_detect(species, "Pine")) |>
  select(species, legal_status, plant_date, latitude, longitude) |>
  mutate(type = ifelse(str_detect(species, 'Oak'), 'oak', 'pine'))

```

|functions as 'or'


```{r}
ggplot(dat = oak_pine_df, aes(x = longitude, y = latitude, color = type)) +
  geom_point()+
  theme_minimal()+
  theme(axis.title = element_blank())+
  labs(color = 'Tree Type', 
       caption = 'Location of Oaks and Pines in San Francisco')
```


## Example 4

load a list of CA native species

```{r}
ca_native_df <- read_csv(here("data/sfo_trees/ca_native_spp.csv"))
```

How can we compare the CA native species to those in our SF trees database? Add a column noting whether a tree is native or not. We'll need the common and scientific names separated!


```{r}
sfo_trees_native <- sfo_trees_df %>% 
  separate(species, into = c("spp_sci", "spp_common"), sep = " :: ") %>%
  select(starts_with('spp'), 'plant_date', 'legal_status', 'longitude', 'latitude') %>%
  mutate(ca_native = (spp_sci %in% ca_native_df$scientific_name))

sfo_native_status <- sfo_trees_native |>
  group_by(legal_status, ca_native) |>
  summarize(n_trees = n(), n_species = n_distinct(spp_sci))

```




